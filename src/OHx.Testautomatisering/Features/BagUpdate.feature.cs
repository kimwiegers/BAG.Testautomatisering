// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OHx.Testautomatisering.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BagUpdateFeature : object, Xunit.IClassFixture<BagUpdateFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BagUpdate.feature"
#line hidden
        
        public BagUpdateFeature(BagUpdateFeature.FixtureData fixtureData, OHx_Testautomatisering_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl-NL"), "Features", "BagUpdate", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Een wegvak valt na de BAG update onder een nieuwe gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Een wegvak valt na de BAG update onder een nieuwe gemeente")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999998", "Tirana", "Academiestraat_N", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999997", "Tirana", "Academiestraat_N", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999996", "Tirana", "Academiestraat_B", "Academiestraat_N", "de gemeente", new string[0])]
        public virtual void EenWegvakValtNaDeBAGUpdateOnderEenNieuweGemeente(string oudeGemeente, string wegvakId, string nieuweGemeente, string oudeStraat, string nieuweStraat, string wegbeheerder, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("oude straat", oudeStraat);
            argumentsOfScenario.Add("nieuwe straat", nieuweStraat);
            argumentsOfScenario.Add("wegbeheerder", wegbeheerder);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een wegvak valt na de BAG update onder een nieuwe gemeente", "Achtergrond: De begrenzing van een gemeente is aangepast. ", tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor het wegvak " +
                            "met id {1} onder gemeente \'{2}\' komt te vallen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 8
testRunner.And(string.Format("het wegvak verschuift door de aanpassing van de straat \'{0}\' in \'{1}\' naar \'{2}\' " +
                            "in \'{3}\'", oudeStraat, oudeGemeente, nieuweStraat, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 9
testRunner.And(string.Format("\'{0}\' is de wegbeheerder", wegbeheerder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 10
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 11
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 12
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BagUpdateFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BagUpdateFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
