// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BagUpdate.Testautomatisering.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BagUpdateFeature : object, Xunit.IClassFixture<BagUpdateFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BagUpdate.feature"
#line hidden
        
        public BagUpdateFeature(BagUpdateFeature.FixtureData fixtureData, BagUpdate_Testautomatisering_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl-NL"), "Features", "BagUpdate", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Een wegvak valt na de BAG update onder een nieuwe gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Een wegvak valt na de BAG update onder een nieuwe gemeente")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999998", "Tirana", "Academiestraat_N", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999997", "Tirana", "Academiestraat_N", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999996", "Tirana", "Academiestraat_B", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999995", "Tirana", "Academiestraat_B", "Academiestraat_N", "Berlijn", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999994", "Tirana", "Academiestraat_B", "Academiestraat_N", "Sofia", new string[0])]
        [Xunit.InlineDataAttribute("Tallinn", "999999988", "Tirana", "Academiestraat_B", "Academiestraat_N", "de provincie", new string[0])]
        public virtual void EenWegvakValtNaDeBAGUpdateOnderEenNieuweGemeente(string oudeGemeente, string wegvakId, string nieuweGemeente, string oudeStraat, string nieuweStraat, string wegbeheerder, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("oude straat", oudeStraat);
            argumentsOfScenario.Add("nieuwe straat", nieuweStraat);
            argumentsOfScenario.Add("wegbeheerder", wegbeheerder);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een wegvak valt na de BAG update onder een nieuwe gemeente", "Achtergrond: De begrenzing van een gemeente is aangepast. ", tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor het wegvak " +
                            "met id {1} onder gemeente \'{2}\' komt te vallen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 8
testRunner.And(string.Format("het wegvak verschuift door de aanpassing van de straat \'{0}\' in \'{1}\' naar \'{2}\' " +
                            "in \'{3}\'", oudeStraat, oudeGemeente, nieuweStraat, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 9
testRunner.And(string.Format("\'{0}\' is de wegbeheerder", wegbeheerder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 10
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 11
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 12
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Een wegvak ligt na de BAG update in een onbekende gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Een wegvak ligt na de BAG update in een onbekende gemeente")]
        public virtual void EenWegvakLigtNaDeBAGUpdateInEenOnbekendeGemeente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een wegvak ligt na de BAG update in een onbekende gemeente", "Achtergrond: De nieuwe gemeente is niet bekend in BAG", tagsOfScenario, argumentsOfScenario);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999993 onder on onbekende gemeente komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 28
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 29
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Wegvak ligt minder dan 2 meter in nieuwe gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Wegvak ligt minder dan 2 meter in nieuwe gemeente")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999992", "Tirana", "de lengte van het wegvak dat in de nieuwe gemeente ligt", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999990", "Tirana", "de lengte van het wegvak dat uit de eigen gemeente mag steken", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999989", "Tirana", "de lengte van het wegvak dat uit de eigen gemeente mag steken", new string[0])]
        public virtual void WegvakLigtMinderDan2MeterInNieuweGemeente(string oudeGemeente, string wegvakId, string nieuweGemeente, string meldingOnderwerp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("melding onderwerp", meldingOnderwerp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wegvak ligt minder dan 2 meter in nieuwe gemeente", "Achtergrond: Een wegvak valt na de BAG update gedeeltelijk in de nieuwe gemeente." +
                    " Het wegvak wordt niet meegenomen in de BAG update. Deel van het wegvak ligt in " +
                    "de oude gemeente, wegvak blijft onder oude gemeente vallen", tagsOfScenario, argumentsOfScenario);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor minder dan " +
                            "twee meter van het wegvak met id {1} in de gemeente \'{2}\' komt te liggen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 35
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 36
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 37
testRunner.And(string.Format("is er een melding betreffende \'{0}\' weggeschreven in de meldingen tabel", meldingOnderwerp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Wegvak ligt meer dan 2 meter in nieuwe gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Wegvak ligt meer dan 2 meter in nieuwe gemeente")]
        public virtual void WegvakLigtMeerDan2MeterInNieuweGemeente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wegvak ligt meer dan 2 meter in nieuwe gemeente", "Achtergrond: Een wegvak valt na de BAG update voor meer dan 2 meter in een nieuwe" +
                    " gemeente, minder dan 2 meter in de oude gemeente", tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999991 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 50
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Academiestraat_B\' in \'Kop" +
                        "enhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 51
testRunner.And("\'Nicosia\' is de wegbeheerder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 52
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 53
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 54
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="De wegbeheerdersoort staat onjuist in de wegvakken tabel")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "De wegbeheerdersoort staat onjuist in de wegvakken tabel")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999987", "Tirana", "Berlijn", "de wegbeheerder", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999986", "Tirana", "Tallinn", "de wegbeheerder", new string[0])]
        public virtual void DeWegbeheerdersoortStaatOnjuistInDeWegvakkenTabel(string oudeGemeente, string wegvakId, string nieuweGemeente, string wegbeheerder, string meldingOnderwerp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("wegbeheerder", wegbeheerder);
            argumentsOfScenario.Add("melding onderwerp", meldingOnderwerp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("De wegbeheerdersoort staat onjuist in de wegvakken tabel", "Achtergrond: wegbeheersoort in nww_wegvakefemeriden en nww_wegbeheerders verschil" +
                    "t voor het wegbeheerderId", tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor het wegvak " +
                            "met id {1} onder gemeente \'{2}\' komt te vallen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 60
testRunner.And(string.Format("\'{0}\' is de wegbeheerder", wegbeheerder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 61
testRunner.And("de wegbeheerdersoort staat onjuist in de wegvakken tabel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 62
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 63
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 64
testRunner.And(string.Format("is er een melding betreffende \'{0}\' weggeschreven in de meldingen tabel", meldingOnderwerp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Straat in nieuwe gemeente onbekend, oude straat ook onbekend")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Straat in nieuwe gemeente onbekend, oude straat ook onbekend")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999985", "Tirana", "Achiel Van Ackerplein", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999982", "Tirana", "Annuntiatenstraat", "Academiestraat_N", "de gemeente", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999979", "Tirana", "Albrecht Rodenbachstraat", "Academiestraat_N", "de gemeente", new string[0])]
        public virtual void StraatInNieuweGemeenteOnbekendOudeStraatOokOnbekend(string oudeGemeente, string wegvakId, string nieuweGemeente, string oudeStraat, string nieuweStraat, string wegbeheerder, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("oude straat", oudeStraat);
            argumentsOfScenario.Add("nieuwe straat", nieuweStraat);
            argumentsOfScenario.Add("wegbeheerder", wegbeheerder);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Straat in nieuwe gemeente onbekend, oude straat ook onbekend", "Achtergrond: Een wegvak valt na de BAG update onder een nieuwe gemeente, de oude " +
                    "straat is nog niet bekend in BAG, de nieuwe straat is niet gevonden", tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 74
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor het wegvak " +
                            "met id {1} onder gemeente \'{2}\' komt te vallen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 75
testRunner.And(string.Format("het wegvak verschuift door de aanpassing van de straat \'{0}\' in \'{1}\' naar \'{2}\' " +
                            "in \'{3}\'", oudeStraat, oudeGemeente, nieuweStraat, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 76
testRunner.And(string.Format("de straat \'{0}\' is nog niet bekend in BAG", oudeStraat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 77
testRunner.And("de nieuwe straat is niet gevonden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 78
testRunner.And(string.Format("\'{0}\' is de wegbeheerder", wegbeheerder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 79
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 80
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 81
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 82
testRunner.And(string.Format("is de straat \'{0}\' toegevoegd als vervallen straat in de NWW database", oudeStraat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Minder dan 2 meter wegvak ligt in nieuwe gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Minder dan 2 meter wegvak ligt in nieuwe gemeente")]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999984", "Tirana", "Ankerplein", "de lengte van het wegvak dat in de nieuwe gemeente ligt", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999983", "Tirana", "Annuntiatenstraat", "de lengte van het wegvak dat in de nieuwe gemeente ligt", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999981", "Tirana", "Arsenaalstraat", "de lengte van het wegvak dat in de nieuwe gemeente ligt", new string[0])]
        [Xunit.InlineDataAttribute("Kopenhagen", "999999980", "Tirana", "Arsenaalstraat", "de lengte van het wegvak dat in de nieuwe gemeente ligt", new string[0])]
        public virtual void MinderDan2MeterWegvakLigtInNieuweGemeente(string oudeGemeente, string wegvakId, string nieuweGemeente, string straat, string melding, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeente", oudeGemeente);
            argumentsOfScenario.Add("wegvak id", wegvakId);
            argumentsOfScenario.Add("nieuwe gemeente", nieuweGemeente);
            argumentsOfScenario.Add("straat", straat);
            argumentsOfScenario.Add("melding", melding);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minder dan 2 meter wegvak ligt in nieuwe gemeente", "Achtergrond: Minder dan 2 meter van een wegvak valt na de BAG update onder een ni" +
                    "euwe gemeente, de oude gemeente is nog niet bekend in BAG. Het wegvak wordt niet" +
                    " in BAG update meegenomen, straat wordt wel opgevoerd", tagsOfScenario, argumentsOfScenario);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
testRunner.Given(string.Format("een gebruiker de grens van de gemeente \'{0}\' heeft aangepast waardoor minder dan " +
                            "twee meter van het wegvak met id {1} in de gemeente \'{2}\' komt te liggen", oudeGemeente, wegvakId, nieuweGemeente), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 95
testRunner.And(string.Format("de straat \'{0}\' is nog niet bekend in BAG", straat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 96
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 97
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 98
testRunner.And(string.Format("is er een melding betreffende \'{0}\' weggeschreven in de meldingen tabel", melding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 99
testRunner.And("is de straat \'Ankerplein\' toegevoegd als vervallen straat in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Straat in nieuwe gemeente onbekend")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Straat in nieuwe gemeente onbekend")]
        public virtual void StraatInNieuweGemeenteOnbekend()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Straat in nieuwe gemeente onbekend", "Achtergrond: Een wegvak valt na de BAG update onder een nieuwe gemeente, de nieuw" +
                    "e straat is niet gevonden en oude straatnaam is \'P\', wegvak wordt niet meegenome" +
                    "n in de BAG update", tagsOfScenario, argumentsOfScenario);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999978 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 113
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Adriaan Willaertstraat\' i" +
                        "n \'Kopenhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 114
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 115
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 116
testRunner.And("is er een melding betreffende \'de gemeente\' weggeschreven in de meldingen tabel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verschil gemeente in straten tabel & wegvakefemeriden tabel")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Verschil gemeente in straten tabel & wegvakefemeriden tabel")]
        public virtual void VerschilGemeenteInStratenTabelWegvakefemeridenTabel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verschil gemeente in straten tabel & wegvakefemeriden tabel", "Achtergrond: De gemeente in de straten tabel en de wegvakefemeriden tabel komt ni" +
                    "et overeen. Wegvak wordt niet meegenomen in de BAG update.", tagsOfScenario, argumentsOfScenario);
#line 118
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999977 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 122
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Academiestraat_B\' in \'Kop" +
                        "enhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 123
testRunner.And("de gemeente staat verkeerd in de wegvakken tabel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 124
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 125
testRunner.Then("is het wegvak niet meegenomen in de BAG Update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 126
testRunner.And("is er een melding betreffende \'de gemeente\' weggeschreven in de meldingen tabel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hectopunten")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Hectopunten")]
        public virtual void Hectopunten()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hectopunten", null, tagsOfScenario, argumentsOfScenario);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 131
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999976 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 132
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Academiestraat_N\' in \'Kop" +
                        "enhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 133
testRunner.And("\'de gemeente\' is de wegbeheerder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 134
testRunner.And("het wegvak heeft 4 hectopunten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 135
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 136
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 137
testRunner.And("zijn de hectopunten meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 138
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 139
testRunner.And("zijn de hectopunten geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Hectointervallen")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Hectointervallen")]
        public virtual void Hectointervallen()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hectointervallen", null, tagsOfScenario, argumentsOfScenario);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 144
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999975 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 145
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Academiestraat_N\' in \'Kop" +
                        "enhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 146
testRunner.And("\'de gemeente\' is de wegbeheerder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 147
testRunner.And("het wegvak heeft 1 hectointerval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 148
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 149
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 150
testRunner.And("zijn de hectointervallen meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 151
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 152
testRunner.And("zijn de hectointervallen geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Wegvak in route")]
        [Xunit.TraitAttribute("FeatureTitle", "BagUpdate")]
        [Xunit.TraitAttribute("Description", "Wegvak in route")]
        public virtual void WegvakInRoute()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wegvak in route", null, tagsOfScenario, argumentsOfScenario);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 157
testRunner.Given("een gebruiker de grens van de gemeente \'Kopenhagen\' heeft aangepast waardoor het " +
                        "wegvak met id 999999974 onder gemeente \'Tirana\' komt te vallen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 158
testRunner.And("het wegvak verschuift door de aanpassing van de straat \'Academiestraat_N\' in \'Kop" +
                        "enhagen\' naar \'Academiestraat_N\' in \'Tirana\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 159
testRunner.And("\'de gemeente\' is de wegbeheerder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 160
testRunner.And("het wegvak is onderdeel van 2 routes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 161
testRunner.When("de Bag Update is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 162
testRunner.Then("is het wegvak meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 163
testRunner.And("zijn de routes meegenomen in de BAG update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 164
testRunner.And("is het wegvak geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 165
testRunner.And("zijn de routes geupdatet in de NWW database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BagUpdateFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BagUpdateFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
