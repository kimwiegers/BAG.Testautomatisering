// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BagImport.Testautomatisering
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BagImportFeature : object, Xunit.IClassFixture<BagImportFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BagImport.feature"
#line hidden
        
        public BagImportFeature(BagImportFeature.FixtureData fixtureData, BagImport_Testautomatisering_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl-NL"), "", "BagImport", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="De gemeente Bunnik wordt samengevoegd met Zeist")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "De gemeente Bunnik wordt samengevoegd met Zeist")]
        [Xunit.InlineDataAttribute("Werkhoven", new string[0])]
        [Xunit.InlineDataAttribute("Bunnik", new string[0])]
        [Xunit.InlineDataAttribute("Odijk", new string[0])]
        public virtual void DeGemeenteBunnikWordtSamengevoegdMetZeist(string woonplaats, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("woonplaats", woonplaats);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("De gemeente Bunnik wordt samengevoegd met Zeist", null, tagsOfScenario, argumentsOfScenario);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
testRunner.Given("de gemeente \'Bunnik\' na een gemeentelijke herindeling toegevoegd is aan de gemeen" +
                        "te \'Zeist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 5
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 6
testRunner.Then("krijgen alle straten onder de gemeente \'Bunnik\' in gga_straten de status \'vervall" +
                        "en\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 7
testRunner.And("worden de straten opgevoerd als horende bij gemeente \'Zeist\' in gga_straten met d" +
                        "e status \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 8
testRunner.And(string.Format("is in gga_woonplaatsen is een nieuw record aangemaakt voor \'{0}\' als horende bij " +
                            "gemeente \'Zeist\'", woonplaats), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Een woonplaats valt na een gemeentelijke herindeling onder een andere gemeente")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Een woonplaats valt na een gemeentelijke herindeling onder een andere gemeente")]
        public virtual void EenWoonplaatsValtNaEenGemeentelijkeHerindelingOnderEenAndereGemeente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een woonplaats valt na een gemeentelijke herindeling onder een andere gemeente", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
testRunner.Given("de woonplaats \'Bocholtz\' na een gemeentelijke herindeling is verschoven van de ge" +
                        "meente \'Simpelveld\' naar de gemeente \'Heerlen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 19
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 20
testRunner.Then("krijgen alle straten in \'Bocholtz\' onder de gemeente \'Simpelveld\' in gga_straten " +
                        "de status \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 21
testRunner.And("worden de straten in de woonplaats \'Bocholtz\' opgevoerd als horende bij gemeente " +
                        "\'Heerlen\' in gga_straten met de status \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 22
testRunner.And("is in gga_woonplaatsen is een nieuw record aangemaakt voor \'Bocholtz\' als horende" +
                        " bij gemeente \'Heerlen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="De naam van een gemeente is gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "De naam van een gemeente is gewijzigd")]
        [Xunit.InlineDataAttribute("Schiedam", "Schildam", new string[0])]
        [Xunit.InlineDataAttribute("Sudwest-Fryslan", "Súdwest-Fryslân", new string[0])]
        public virtual void DeNaamVanEenGemeenteIsGewijzigd(string oudeGemeentenaam, string nieuweGemeentenaam, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oude gemeentenaam", oudeGemeentenaam);
            argumentsOfScenario.Add("nieuwe gemeentenaam", nieuweGemeentenaam);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("De naam van een gemeente is gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
testRunner.Given(string.Format("de gemeente \'{0}\' aangepast is naar \'{1}\'", oudeGemeentenaam, nieuweGemeentenaam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 26
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 27
testRunner.Then(string.Format("is de naam in gga_gemeenten aangepast naar \'{0}\'", nieuweGemeentenaam), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="De naam van een woonplaats is gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "De naam van een woonplaats is gewijzigd")]
        public virtual void DeNaamVanEenWoonplaatsIsGewijzigd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("De naam van een woonplaats is gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
testRunner.Given("de woonplaats \'Kropswolde\' is hernaamd naar \'Kipswolde\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 37
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 38
testRunner.Then("En is de naam in gga_woonplaatsen aangepast naar \'Kipswolde\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Een straatnaam is gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Een straatnaam is gewijzigd")]
        public virtual void EenStraatnaamIsGewijzigd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een straatnaam is gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
testRunner.Given("de straat \'Zwet\' is aangepast naar \'Zweet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 44
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 45
testRunner.Then("En is de naam in gga_straten aangepast naar \'Zweet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Het BAG id van een bestaande \'P\' straat (een straat bekend in BAG)  is gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Het BAG id van een bestaande \'P\' straat (een straat bekend in BAG)  is gewijzigd")]
        public virtual void HetBAGIdVanEenBestaandePStraatEenStraatBekendInBAGIsGewijzigd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Het BAG id van een bestaande \'P\' straat (een straat bekend in BAG)  is gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
testRunner.Given("het BAG id van \'Bieslaan\' in \'Appingedam\' gewijzigd is van \'01234\' naar \'00033000" +
                        "00116991\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 49
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 50
testRunner.Then("krijgt de de straat met BAG id \'01234\' het type \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 51
testRunner.And("is er een nieuw record aangemaakt in gga_straten voor \'Bieslaan\' met BAG id \'0003" +
                        "300000116991\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Het BAG id en de naam van een bestaande \'P\' straat (een straat bekend in BAG)  is" +
            " gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Het BAG id en de naam van een bestaande \'P\' straat (een straat bekend in BAG)  is" +
            " gewijzigd")]
        public virtual void HetBAGIdEnDeNaamVanEenBestaandePStraatEenStraatBekendInBAGIsGewijzigd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Het BAG id en de naam van een bestaande \'P\' straat (een straat bekend in BAG)  is" +
                    " gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
testRunner.Given("de naam  van een straat is gewijzigd van \'Bifoehof\' naar \'Difoehof\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 55
testRunner.And("het BAG id van \'Difoehof\' in \'Capelle aan den IJssel\' gewijzigd is van \'12345\' na" +
                        "ar \'0502300000001971\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 56
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 57
testRunner.Then("krijgt de de straat met BAG id \'12345\' het type \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 58
testRunner.And("is er een nieuw record aangemaakt in gga_straten voor \'Difoehof\' met BAG id \'0003" +
                        "300000116991\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Er is een nieuwe BAG straat die nog niet bekend is in de BN")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Er is een nieuwe BAG straat die nog niet bekend is in de BN")]
        public virtual void ErIsEenNieuweBAGStraatDieNogNietBekendIsInDeBN()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Er is een nieuwe BAG straat die nog niet bekend is in de BN", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
testRunner.Given("de straat \'Karrebosserveldweg\' in de gemeente \'Echt-Susteren\' nog niet bekend is " +
                        "in de BN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 62
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 63
testRunner.Then("is de straat \'Karrebosserveldweg\' toegevoegd in gga_straten als \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Er is een nieuwe BAG-straat die nu als \'A\' straat in BN staat met andere data")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Er is een nieuwe BAG-straat die nu als \'A\' straat in BN staat met andere data")]
        public virtual void ErIsEenNieuweBAG_StraatDieNuAlsAStraatInBNStaatMetAndereData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Er is een nieuwe BAG-straat die nu als \'A\' straat in BN staat met andere data", null, tagsOfScenario, argumentsOfScenario);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
testRunner.Given("de straat \'Lampenist\' in de woonplaats \'Amersfoort\' in BN staat als \'RWS-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 67
testRunner.And("de naam-gerelateerde velden zijn leeg", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 68
testRunner.And("de straat is inmiddels bekend in BAG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 69
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 70
testRunner.Then("is de straat \'Lampenist\' geupdatet in gga_straten als \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 71
testRunner.And("zijn de naam-gerelateerde velden van \'Lampenist\' gevuld met de data die in BAG be" +
                        "kend is", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Er is een nieuwe BAG-straat die nu als \'V\' straat in BN staat, waarvan de data ve" +
            "rschilt")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Er is een nieuwe BAG-straat die nu als \'V\' straat in BN staat, waarvan de data ve" +
            "rschilt")]
        public virtual void ErIsEenNieuweBAG_StraatDieNuAlsVStraatInBNStaatWaarvanDeDataVerschilt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Er is een nieuwe BAG-straat die nu als \'V\' straat in BN staat, waarvan de data ve" +
                    "rschilt", null, tagsOfScenario, argumentsOfScenario);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 74
testRunner.Given("de straat \'De Stator\' in de woonplaats \'Amersfoort\' in BN staat als \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 75
testRunner.And("de straat is inmiddels bekend in BAG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 76
testRunner.And("de naam_ptt en naam_afkorting van de straat \'De Stator\' staan foutief in BN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 77
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 78
testRunner.Then("is de straat \'De Stator\' geupdatet in gga_straten als \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 79
testRunner.And("zijn de naam-gerelateerde velden van \'De Stator\' gevuld met de data die in BAG be" +
                        "kend is", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Er is een nieuwe BAG \'P\' straat die nu als \'V\' straat in BN staat met dezelfde da" +
            "ta")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Er is een nieuwe BAG \'P\' straat die nu als \'V\' straat in BN staat met dezelfde da" +
            "ta")]
        public virtual void ErIsEenNieuweBAGPStraatDieNuAlsVStraatInBNStaatMetDezelfdeData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Er is een nieuwe BAG \'P\' straat die nu als \'V\' straat in BN staat met dezelfde da" +
                    "ta", null, tagsOfScenario, argumentsOfScenario);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
testRunner.Given("de straat \'Woudrichemstraat\' in de woonplaats \'Amersfoort\' in BN staat als \'verva" +
                        "llen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 83
testRunner.And("de straat is inmiddels bekend in BAG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 84
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 85
testRunner.Then("is de straat \'Woudrichemstraat\' geupdatet in gga_straten als \'BAG-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Een BAG-straat is opgeheven en wordt omgezet naar \'Vervallen\' straat")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Een BAG-straat is opgeheven en wordt omgezet naar \'Vervallen\' straat")]
        public virtual void EenBAG_StraatIsOpgehevenEnWordtOmgezetNaarVervallenStraat()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een BAG-straat is opgeheven en wordt omgezet naar \'Vervallen\' straat", null, tagsOfScenario, argumentsOfScenario);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
testRunner.Given("de straat \'Marie Vierdaghof\' in de woonplaats \'Amersfoort\' in BN staat als \'BAG-s" +
                        "traat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 89
testRunner.And("de straat is inmiddels vervallen in BAG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 90
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 91
testRunner.Then("is de straat \'Marie Vierdaghof\' geupdatet in gga_straten als \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Een BAG-straat is opgeheven en wordt omgezet naar \'vervallen\' straat en de gegeve" +
            "ns zijn gewijzigd")]
        [Xunit.TraitAttribute("FeatureTitle", "BagImport")]
        [Xunit.TraitAttribute("Description", "Een BAG-straat is opgeheven en wordt omgezet naar \'vervallen\' straat en de gegeve" +
            "ns zijn gewijzigd")]
        public virtual void EenBAG_StraatIsOpgehevenEnWordtOmgezetNaarVervallenStraatEnDeGegevensZijnGewijzigd()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Een BAG-straat is opgeheven en wordt omgezet naar \'vervallen\' straat en de gegeve" +
                    "ns zijn gewijzigd", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
testRunner.Given("de straat \'Ton van Heugtenhof\' in de woonplaats \'Amersfoort\' in BN staat als \'BAG" +
                        "-straat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeven ");
#line hidden
#line 95
testRunner.And("de straat is inmiddels vervallen in BAG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 96
testRunner.And("de naam_officieel van de straat \'Ton van Heugtenhof\' mist in de BN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
#line 97
testRunner.When("de BAG import is afgerond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
#line 98
testRunner.Then("is de straat \'Ton van Heugtenhof\' geupdatet in gga_straten als \'vervallen\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dan ");
#line hidden
#line 99
testRunner.And("zijn de naam-gerelateerde velden van \'Ton van Heugtenhof\' gevuld met de data die " +
                        "in BAG bekend is", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "En ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BagImportFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BagImportFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
